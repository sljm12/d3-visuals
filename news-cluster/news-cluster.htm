<!DOCTYPE html>
<meta charset="utf-8">
<style>

circle {
  stroke: #fff;
}

</style>
<body>
<script src="http://d3js.org/d3.v3.min.js"></script>
<script src="http://cdnjs.cloudflare.com/ajax/libs/moment.js/2.5.1/moment.min.js"></script>
<script>

var width = 960,
    height = 500,
    padding = 6, // separation between nodes
    maxRadius = 12;

    width=window.innerWidth;

var n = 100, // total number of nodes
    m = 10; // number of distinct clusters
    ndates=12;//number of dates to generate, this is so that we get a gap at both ends for easy visualisation

var color = d3.scale.category10()
    .domain(d3.range(m));

var x = d3.scale.ordinal()
    .domain(d3.range(m))
    .rangePoints([0, width], 1);

//Generate the dates
function getCurrentDate_noTime(){
  var nextDay=moment().add('days',1);
  var dateString=nextDay.format("YYYY MM DD");

  return moment(dateString,"YYYY MM DD");
}

function generateDates(n){
  var result=[];
  for(var a=0;a<n;a++){
    var d=getCurrentDate_noTime().subtract('days',a).toDate();
    result.push(d);
  }
  return result;
}

var dateExtent=generateDates(ndates);
//Generate the time scale 
var x_time=d3.time.scale().range([0, width]).domain(d3.extent(dateExtent));

var x_axis=d3.svg.axis()
  .scale(x_time)
  .orient("bottom");


/*
var nodes = d3.range(n).map(function() {
  var i = Math.floor(Math.random() * m),
      v = (i + 1) / m * -Math.log(Math.random());
  return {
    radius: Math.sqrt(v) * maxRadius,
    color: color(i),
    cx: x(i),
    cy: height / 2
  };
});*/

var svg = d3.select("body").append("svg")
    .attr("width", width)
    .attr("height", height);



//Draw a timeline at the bottom
svg.append("g").attr("transform","translate(" + 0 + "," + (height-20) + ")").call(x_axis);
/*
var nodes = d3.range(n).map(function() {
  var i = Math.floor(Math.random() * m),
      v = (i + 1) / m * -Math.log(Math.random());
  return {
    radius: Math.sqrt(v) * maxRadius,
    color: color(i),
    //cx: x(i),
    cx:x_time(dateExtent[i+1]), //Cluster focus X coord, we move 1 so that we get a gap on the left side
    cy: height / 2,//Cluster Focus Y coord
    date:dateExtent[i+1]
  };
});*/

function getDateOnly(dateString){
  var dateMoment=moment(dateString).format("YYYY MM DD");
  return moment(dateMoment,"YYYY MM DD").toDate();
}

function getColorIndex(date){
  for(var i=0;i<dateExtent.length;i++){
    if(dateExtent[i].getTime()==date.getTime()){
      return i;
    }
  }
  return 0;
}

d3.json("all.json",function(error,json){

  var data=json.map(function(currentValue,index,array){
    //console.log(currentValue);
    var currentDate=getDateOnly(currentValue.date);
    var currentRadius=currentValue.num_articles>maxRadius?maxRadius:currentValue.num_articles;
    currentRadius=currentRadius<10?5:maxRadius;
    console.log(getColorIndex(currentDate));
    return {
      radius:currentRadius,
      color: color(getColorIndex(currentDate)),
      //cx: x(i),
      cx:x_time(currentDate), //Cluster focus X coord, we move 1 so that we get a gap on the left side
      cy: height / 2,//Cluster Focus Y coord
      date:currentDate,
      title:currentValue.title
    }
  });

  var nodes=data;
  console.log(data);
  var force = d3.layout.force()
    .nodes(nodes)
    .size([width, height])
    .gravity(0)
    .charge(0)
    .on("tick", tick)
    .start();

  var circle = svg.selectAll("circle")
    .data(nodes)
  .enter().append("circle")
    .attr("r", function(d) { return d.radius; })
    .style("fill", function(d) {
      return d.color; 
    })
    .call(force.drag);

  function tick(e) {
  circle
      .each(gravity(.2 * e.alpha))
      .each(collide(.5))
      .attr("cx", function(d) { return d.x; })
      .attr("cy", function(d) { return d.y; })
      .append('title').text(function(d){
        return d.title;
      })
      ;
  }

  // Move nodes toward cluster focus.
  function gravity(alpha) {
    return function(d) {
      d.y += (d.cy - d.y) * alpha;
      d.x += (d.cx - d.x) * alpha;
    };
  }

  // Resolve collisions between nodes.
  function collide(alpha) {
    var quadtree = d3.geom.quadtree(nodes);
    return function(d) {
      var r = d.radius + maxRadius + padding,
          nx1 = d.x - r,
          nx2 = d.x + r,
          ny1 = d.y - r,
          ny2 = d.y + r;
      quadtree.visit(function(quad, x1, y1, x2, y2) {
        if (quad.point && (quad.point !== d)) {
          var x = d.x - quad.point.x,
              y = d.y - quad.point.y,
              l = Math.sqrt(x * x + y * y),
              r = d.radius + quad.point.radius + (d.color !== quad.point.color) * padding;
          if (l < r) {
            l = (l - r) / l * alpha;
            d.x -= x *= l;
            d.y -= y *= l;
            quad.point.x += x;
            quad.point.y += y;
          }
        }
        return x1 > nx2 || x2 < nx1 || y1 > ny2 || y2 < ny1;
      });
    };
  }
}); 





</script>